// Mocks generated by Mockito 5.4.4 from annotations
// in energy_app/test/providers/dashboard_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:energy_app/api/api.dart' as _i2;
import 'package:energy_app/api/models/energy_point.dart' as _i4;
import 'package:energy_app/providers/dashboard_provider.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApi_0 extends _i1.SmartFake implements _i2.Api {
  _FakeApi_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DashboardProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardProvider extends _i1.Mock implements _i3.DashboardProvider {
  MockDashboardProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set maxSolar(_i4.EnergyPoint? _maxSolar) => super.noSuchMethod(
        Invocation.setter(
          #maxSolar,
          _maxSolar,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set maxHouse(_i4.EnergyPoint? _maxHouse) => super.noSuchMethod(
        Invocation.setter(
          #maxHouse,
          _maxHouse,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set maxBatt(_i4.EnergyPoint? _maxBatt) => super.noSuchMethod(
        Invocation.setter(
          #maxBatt,
          _maxBatt,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Api get api => (super.noSuchMethod(
        Invocation.getter(#api),
        returnValue: _FakeApi_0(
          this,
          Invocation.getter(#api),
        ),
      ) as _i2.Api);

  @override
  set solar(List<_i4.EnergyPoint>? data) => super.noSuchMethod(
        Invocation.setter(
          #solar,
          data,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set house(List<_i4.EnergyPoint>? data) => super.noSuchMethod(
        Invocation.setter(
          #house,
          data,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set battery(List<_i4.EnergyPoint>? data) => super.noSuchMethod(
        Invocation.setter(
          #battery,
          data,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i4.EnergyPoint> get solar => (super.noSuchMethod(
        Invocation.getter(#solar),
        returnValue: <_i4.EnergyPoint>[],
      ) as List<_i4.EnergyPoint>);

  @override
  List<_i4.EnergyPoint> get house => (super.noSuchMethod(
        Invocation.getter(#house),
        returnValue: <_i4.EnergyPoint>[],
      ) as List<_i4.EnergyPoint>);

  @override
  List<_i4.EnergyPoint> get battery => (super.noSuchMethod(
        Invocation.getter(#battery),
        returnValue: <_i4.EnergyPoint>[],
      ) as List<_i4.EnergyPoint>);

  @override
  DateTime get currentDate => (super.noSuchMethod(
        Invocation.getter(#currentDate),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#currentDate),
        ),
      ) as DateTime);

  @override
  _i3.Unit get currentUnit => (super.noSuchMethod(
        Invocation.getter(#currentUnit),
        returnValue: _i3.Unit.W,
      ) as _i3.Unit);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  dynamic setUnit(_i3.Unit? unit) => super.noSuchMethod(Invocation.method(
        #setUnit,
        [unit],
      ));

  @override
  _i5.Future<void> fetchData(
    DateTime? date,
    _i3.Energy? energy,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchData,
          [
            date,
            energy,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> refreshData() => (super.noSuchMethod(
        Invocation.method(
          #refreshData,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
