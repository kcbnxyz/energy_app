// Mocks generated by Mockito 5.4.4 from annotations
// in energy_app/test/api/api_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:energy_app/api/api.dart' as _i3;
import 'package:energy_app/api/models/energy_point.dart' as _i5;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiResponseWrapper_2<T> extends _i1.SmartFake
    implements _i3.ApiResponseWrapper<T> {
  _FakeApiResponseWrapper_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Api].
///
/// See the documentation for Mockito's code generation for more information.
class MockApi extends _i1.Mock implements _i3.Api {
  MockApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic Function(String) get showErrorMessage => (super.noSuchMethod(
        Invocation.getter(#showErrorMessage),
        returnValue: (String __p0) => null,
      ) as dynamic Function(String));

  @override
  set showErrorMessage(dynamic Function(String)? _showErrorMessage) =>
      super.noSuchMethod(
        Invocation.setter(
          #showErrorMessage,
          _showErrorMessage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Uri getApiUri(
    String? path,
    Map<String, dynamic>? queryParams,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getApiUri,
          [
            path,
            queryParams,
          ],
        ),
        returnValue: _FakeUri_0(
          this,
          Invocation.method(
            #getApiUri,
            [
              path,
              queryParams,
            ],
          ),
        ),
      ) as Uri);

  @override
  _i4.Future<_i2.Response> getRequest(Uri? uri) => (super.noSuchMethod(
        Invocation.method(
          #getRequest,
          [uri],
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #getRequest,
            [uri],
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i3.ApiResponseWrapper<List<_i5.EnergyPoint>>> getEnergyInDay(
    String? date,
    String? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEnergyInDay,
          [
            date,
            type,
          ],
        ),
        returnValue:
            _i4.Future<_i3.ApiResponseWrapper<List<_i5.EnergyPoint>>>.value(
                _FakeApiResponseWrapper_2<List<_i5.EnergyPoint>>(
          this,
          Invocation.method(
            #getEnergyInDay,
            [
              date,
              type,
            ],
          ),
        )),
      ) as _i4.Future<_i3.ApiResponseWrapper<List<_i5.EnergyPoint>>>);

  @override
  void showSnackbarOnException(
          _i3.ApiResponseWrapper<dynamic>? responseWrapper) =>
      super.noSuchMethod(
        Invocation.method(
          #showSnackbarOnException,
          [responseWrapper],
        ),
        returnValueForMissingStub: null,
      );
}
